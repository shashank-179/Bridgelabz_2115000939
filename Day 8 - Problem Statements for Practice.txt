Problem Statements for Practice in C# 
1. Problem 1: Time Zones and DateTimeOffset 
Write a program that displays the current time in different time zones: ● GMT (Greenwich Mean Time) 
● IST (Indian Standard Time) 
● PST (Pacific Standard Time) 
Hint: Use DateTimeOffset and TimeZoneInfo to work with different time zones. 


using System;

class TimeZonesExample
{
   static void Main()
   {
       // Get the current UTC time
       DateTimeOffset utcTime = DateTimeOffset.UtcNow;

       // Convert to different time zones
       DateTimeOffset gmtTime = utcTime; // GMT is the same as UTC
       DateTimeOffset istTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(utcTime, "India Standard Time");
       DateTimeOffset pstTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(utcTime, "Pacific Standard Time");

       // Display the time in different time zones
       Console.WriteLine($"Current UTC/GMT Time: {gmtTime:yyyy-MM-dd HH:mm:ss} GMT");
       Console.WriteLine($"Current IST Time: {istTime:yyyy-MM-dd HH:mm:ss} IST");
       Console.WriteLine($"Current PST Time: {pstTime:yyyy-MM-dd HH:mm:ss} PST");
   }
}
	



2. Problem 2: Date Arithmetic 
Create a program that: 
● Takes a date input and adds 7 days, 1 month, and 2 years to it. ● Then subtracts 3 weeks from the result. 
Hint: Use DateTime.AddDays(), DateTime.AddMonths(), DateTime.AddYears(), and DateTime.AddWeeks() methods. 
using System;

class DateManipulation
{
   static void Main()
   {
       // Take date input from the user
       Console.Write("Enter a date (yyyy-MM-dd): ");
       DateTime inputDate;

       // Validate user input
       while (!DateTime.TryParse(Console.ReadLine(), out inputDate))
       {
           Console.Write("Invalid input. Please enter a valid date (yyyy-MM-dd): ");
       }

       // Perform the required date operations
       DateTime addedDate = inputDate.AddDays(7).AddMonths(1).AddYears(2);  // Add 7 days, 1 month, and 2 years
       DateTime finalDate = addedDate.AddDays(-21);  // Subtract 3 weeks (21 days)

       // Display results
       Console.WriteLine($"\nOriginal Date: {inputDate:yyyy-MM-dd}");
       Console.WriteLine($"After Adding 7 Days, 1 Month, 2 Years: {addedDate:yyyy-MM-dd}");
       Console.WriteLine($"After Subtracting 3 Weeks: {finalDate:yyyy-MM-dd}");
   }
}

	

3. Problem 3: Date Formatting 
Write a program that: 
● Displays the current date in three different formats: 
o dd/MM/yyyy 
o yyyy-MM-dd 
o EEE, MMM dd, yyyy 
Hint: Use DateTime.ToString() with custom date format strings. 


using System;

class DateFormats
{
   static void Main()
   {
       // Get the current date
       DateTime currentDate = DateTime.Now;

       // Display the date in different formats
       Console.WriteLine("Current Date in Different Formats:");
       Console.WriteLine($"1. dd/MM/yyyy  -> {currentDate.ToString("dd/MM/yyyy")}");
       Console.WriteLine($"2. yyyy-MM-dd  -> {currentDate.ToString("yyyy-MM-dd")}");
       Console.WriteLine($"3. EEE, MMM dd, yyyy  -> {currentDate.ToString("ddd, MMM dd, yyyy")}");
   }
}
	



4. Problem 4: Date Comparison 
Write a program that: 
● Takes two date inputs and compares them to check if the first date is before, after, or the same as the second date.
Hint: Use DateTime.Compare(), DateTime.CompareTo(), or direct comparison using DateTime methods.
using System;

class DateComparison
{
   static void Main()
   {
       // Taking first date input from the user
       Console.Write("Enter the first date (yyyy-MM-dd): ");
       DateTime date1 = DateTime.Parse(Console.ReadLine());

       // Taking second date input from the user
       Console.Write("Enter the second date (yyyy-MM-dd): ");
       DateTime date2 = DateTime.Parse(Console.ReadLine());

       // Comparing using DateTime.Compare()
       int result = DateTime.Compare(date1, date2);

       // Displaying the comparison result
       if (result < 0)
       {
           Console.WriteLine("The first date is before the second date.");
       }
       else if (result > 0)
       {
           Console.WriteLine("The first date is after the second date.");
       }
       else
       {
           Console.WriteLine("Both dates are the same.");
       }

       // Alternative method using CompareTo()
       int compareToResult = date1.CompareTo(date2);
       Console.WriteLine($"Using CompareTo(): {(compareToResult < 0 ? "First date is earlier" : compareToResult > 0 ? "First date is later" : "Both dates are equal")}");
   }
}