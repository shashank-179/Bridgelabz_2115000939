Best Practices in Constructors
Use this Keyword:
* Avoid ambiguity when parameter names are the same as attribute names.
* Example: this.customerName = customerName;
Keep Logic Simple:
* Avoid heavy computations or database calls inside constructors.
Provide Multiple Constructors:
* Support various initialization scenarios by overloading constructors.
Encapsulate Logic:
* Use private methods (like CalculatePrice()) to keep constructors clean.
________________


Best Practices in Access Modifiers
Use the Least Privilege:
* Start with the most restrictive modifier (private) and relax it as needed (protected or public).
Encapsulation:
* Always make attributes private and use getters/setters for controlled access.
Protected Usage:
* Use protected only when inheritance is required and controlled access is necessary.
Avoid Overexposure:
* Limit the use of public to methods or classes that are meant to be accessed by external code.
Avoid Leaks:
* Be cautious with exposing mutable objects like collections via getters. Return a copy or an unmodifiable view when possible.
________________




Level 1 Practice Programs
1. Book Class
   * Create a Book class with attributes title, author, and price.
   * Provide both default and parameterized constructors.


using System;
class Book
{
   private string title;
   private string author;
   private double price;
   public Book()
   {
       title = "Unknown Title";
       author = "Unknown Author";
       price = 0.0;
   }
   public Book(string title, string author, double price)
   {
       this.title = title;
       this.author = author;
       this.price = price;
   }
}
	

2. Circle Class
   * Write a Circle class with a radius attribute.
   * Use constructor chaining to initialize radius with both default and user-provided values.


using System;
class Circle
{
   private double radius;
   // Default Constructor 
   public Circle()
   {
        this.radius=1;
   }
   // Parameterized Constructor
   public Circle(double radius)
   {
       this.radius = radius;  
   }
}
	       


3. Person Class (Copy Constructor)
   * Create a Person class with a copy constructor that clones another person's attributes.
using System;
class Person
{
   private string name;
   private int age;
   public Person(string name, int age)
   {
       this.name = name;
       this.age = age;
   }
   public Person(Person Copy)
   {
       this.name =Copy.name;
       this.age =Copy.age;
   }
   public void Display()
   {
       Console.WriteLine($"Name: {name}, Age: {age}");
   }

   public static void Main()
   {
       Person person1 = new Person("Alice", 25);
       Console.WriteLine("Original Person:");
       person1.Display();
       Person person2 = new Person(person1);
       Console.WriteLine("Copied Person:");
       person2.Display();
   }
}
	



4. Hotel Booking System
   * Create a HotelBooking class with attributes guestName, roomType, and nights.
   * Use default, parameterized, and copy constructors to initialize bookings.
using System
class HotelBooking
{
   private string guestName;
   private string roomType;
   private int nights;
   // Default Constructor
   public HotelBooking()
   {
       guestName = "Unknown";
       roomType = "Standard";
       nights = 1;
       Console.WriteLine("Default constructor called.");
   }
   // Parameterized Constructor
   public HotelBooking(string guestName, string roomType, int nights)
   {
       this.guestName = guestName;
       this.roomType = roomType;
       this.nights = nights;
       Console.WriteLine("Parameterized constructor called.");
   }

   // Copy Constructor
   public HotelBooking(HotelBooking copy)
   {
       this.guestName =copy.guestName;
       this.roomType =copy.roomType;
       this.nights =copy.nights;
       Console.WriteLine("Copy constructor called.");
   }
   public void DisplayDetails()
   {
       Console.WriteLine($"Guest Name: {guestName}");
       Console.WriteLine($"Room Type: {roomType}");
       Console.WriteLine($"Nights: {nights}");
   }
   public static void Main()
   {
       // Creating a booking using the default constructor
       HotelBooking defaultBooking = new HotelBooking();
       Console.WriteLine("\nDefault Booking:");
       defaultBooking.DisplayDetails();

       // Creating a booking using the parameterized constructor
       HotelBooking customBooking = new HotelBooking("John Doe", "Deluxe", 3);
       Console.WriteLine("\nCustom Booking:");
       customBooking.DisplayDetails();

       // Creating a copy of an existing booking
       HotelBooking copiedBooking = new HotelBooking(customBooking);
       Console.WriteLine("\nCopied Booking:");
       copiedBooking.DisplayDetails();
   }
}
	



5. Library Book System
   * Create a Book class with attributes title, author, price, and availability.
   * Implement a method BorrowBook() to borrow a book.
using System;
class Book
{
        private string title;
        private string author;
        private double price;
        private bool availability;
        public Book(string title, string author, double price, bool availability)
        {
                this.title=title;
                this.author=author;
                this.price=price;
                this.availability=availability;
        }
        public void Borrowbook()
        {
if(availability)
{
        availability= false;
        Console.WriteLine("Borrowed");
}
else
{
Console.WriteLine("Not available");
}
}
public void DisplayDetails()
{
Console.WriteLine($"Title: {title}");
Console.WriteLine($"Author: {author}");
Console.WriteLine($"Price: ${price:F2}");
Console.WriteLine($"Availability: {(availability ? "Available" : "Not Available")}");
}
public static void Main()
{
        Book book1=new Book("Harry Potter", "JK Rowling", 2000, true);
        Console.WriteLine("Book details");
        book1.DisplayDetails();
        book1.Borrowbook();
        Console.WriteLine("Book Details After Borrowing:");
book1.DisplayDetails();
}
}
	6. Car Rental System
   * Create a CarRental class with attributes customerName, carModel, and rentalDays.
   * Add constructors to initialize the rental details and calculate total cost.
using System;
class CarRental
{
   // Private attributes 
   private string customerName; 
   private string carModel;     
   private int rentalDays;      
   private double dailyRate;    
   // Default Constructor
   public CarRental()
   {
       customerName = "Unknown";
       carModel = "Standard";
       rentalDays = 1;
       dailyRate = 50.0; 
   }
   // Parameterized Constructor 
   public CarRental(string customerName, string carModel, int rentalDays, double dailyRate)
   {
       this.customerName = customerName;
       this.carModel = carModel;
       this.rentalDays = rentalDays;
       this.dailyRate = dailyRate;
   }
   // Method to calculate total rental cost
   public double CalculateTotalCost()
   {
       return rentalDays * dailyRate; 
   }

   // Main method
   public static void Main()
   {
       // Creating a rental using the default constructor
       CarRental defaultRental = new CarRental();
       //  Creating a rental using the parameterized constructor
       CarRental customRental = new CarRental("Alice Johnson", "Toyota Camry", 5, 75.0);
      
   }
}
	



________________


1. Instance vs. Class Variables and Methods
Problem 1: Product Inventory
* Create a Product class with:
   * Instance Variables: productName, price.
   * Class Variable: totalProducts (shared among all products).
* Implement the following methods:
   * An instance method DisplayProductDetails() to display the details of a product.
   * A class method DisplayTotalProducts() to show the total number of products created.
using System;
class Product
{
     // Attributes
        private string productName;
        private double price;
        private static int totalProducts;
        public Product(string productName, double price, int totalProducts)
        {
           // Initialization
                this.productName=productName;
                this.price=price;
                Product.totalProducts=totalProducts;
        }
        public void DisplayProductDetails()
        {
           // Display details
                Console.WriteLine($"Product name: {productName}");
                Console.WriteLine($"Product price: {price}");
                Console.WriteLine($"Total products: {totalProducts}");
        }
        public static void DisplayTotalProducts()
        {    
           // Display static members
                Console.WriteLine($"Total products: {totalProducts}");
        }
        public static void Main()
        {
                Product ob=new Product("Soap", 20, 40);
                ob.DisplayProductDetails();
                Product.DisplayTotalProducts();
        }
}
	

Problem 2: Online Course Management
* Design a Course class with:
   * Instance Variables: courseName, duration, fee.
   * Class Variable: instituteName (common for all courses).
* Implement the following methods:
   * An instance method DisplayCourseDetails() to display course details.
   * A class method UpdateInstituteName() to modify the institute name for all courses.
using System;
class Course
{
     // Attributes 
        private string courseName;
        private double duration;
        private double fee;
        private static string instituteName;
        public Course(string courseName, double duration, double fee, string instituteName)
        {
           // Initialization
                this.courseName=courseName;
                this.duration=duration;
                this.fee=fee;
                Course.instituteName=instituteName;
        }
        public void DisplayCourseDetails()
        {
          // Display details
                Console.WriteLine($"Course name: {courseName}");
                Console.WriteLine($"Course duration: {duration}");
                Console.WriteLine($"Course fee: {fee}");
                Console.WriteLine($"Institute name: {instituteName}");
        }
        public static void UpdateInstituteName()
        {
           // static member modification
                instituteName="GLA University Noida";
                Console.WriteLine($"Institute name: {instituteName}");
        }
        public static void Main()
        {
                Course ob=new Course("BTech", 4, 1200000, "GLA University");
                ob.DisplayCourseDetails();
                Course.UpdateInstituteName();
        }
}
	        


Problem 3: Vehicle Registration
* Create a Vehicle class to manage vehicle details:
   * Instance Variables: ownerName, vehicleType.
   * Class Variable: registrationFee (fixed for all vehicles).
* Implement the following methods:
   * An instance method DisplayVehicleDetails() to display owner and vehicle details.
   * A class method UpdateRegistrationFee() to change the registration fee.
using System;
class Vehicle
{
     // Attributes
        private string ownerName;
        private string vehicleType;
        private static int registrationFee;
        public Vehicle(string ownerName, string vehicleType, int registrationFee)
        {
           // Initialization
                this.ownerName=ownerName;
                this.vehicleType=vehicleType;
                Vehicle.registrationFee=registrationFee;
        }
        public void DisplayVehicleDetails()
        {
           // Display details
                Console.WriteLine($"Owner name: {ownerName}");
                Console.WriteLine($"Vehicle Type: {vehicleType}");
                Console.WriteLine($"Registration fee: {registrationFee}");
        }
        public static void UpdateRegistrationFee()
        { 
           // Update static member 
                registrationFee=20000;
                Console.WriteLine($"Registration fee: {registrationFee}");
        }
        public static void Main()
        {
                Vehicle ob=new Vehicle("Shashank", "SUV", 10000);
                ob.DisplayVehicleDetails();
                Vehicle.UpdateRegistrationFee();
        }
}
        
	



________________


2. Access Modifiers
Problem 1: University Management System
* Create a Student class with:
   * rollNumber (public)
   * name (protected)
   * CGPA (private)
* Implement methods to:
   * Access and modify CGPA using public methods.
   * Create a subclass PostgraduateStudent to demonstrate the use of protected members.
using System;

class Student
{
   public int rollNumber;  // Public: Can be accessed anywhere
   protected string name;  // Protected: Accessible in derived classes
   private double CGPA;    // Private: Accessible only within the Student class

   // Constructor to initialize student details
   public Student(int rollNumber, string name, double CGPA)
   {
       this.rollNumber = rollNumber;
       this.name = name;
       this.CGPA = CGPA;
   }

   // Public method to modify CGPA
   public void UpdateCGPA(double newCGPA)
   {
       if (newCGPA >= 0 && newCGPA <= 10)
       {
           CGPA = newCGPA;
       }
       else
       {
           Console.WriteLine("Invalid CGPA! Please enter a value between 0 and 10.");
       }
   }

   // Public method to access CGPA
   public double GetCGPA()
   {
       return CGPA;
   }

   // Method to display student details
   public void Display()
   {
       Console.WriteLine($"Roll Number: {rollNumber}");
       Console.WriteLine($"Name: {name}");
       Console.WriteLine($"CGPA: {CGPA:F2}");
   }
}

// Derived class demonstrating protected member access
class PostgraduateStudent : Student
{
   public PostgraduateStudent(int rollNumber, string name, double CGPA)
       : base(rollNumber, name, CGPA) {}

   // Method to display postgraduate student details
   public void DisplayDetails()
   {
       Console.WriteLine($"Roll Number: {rollNumber}");  // Public (Accessible)
       Console.WriteLine($"Name: {name}");               // Protected (Accessible in derived class)
       Console.WriteLine($"CGPA: {GetCGPA():F2}");       // Private (Accessed using a public method)
   }

   public static void Main()
   {
       // Creating a postgraduate student object
       PostgraduateStudent pgStudent = new PostgraduateStudent(202, "Harsh", 9.0);

       // Displaying details
       pgStudent.DisplayDetails();

       Console.WriteLine("\nUpdating CGPA...");
       pgStudent.UpdateCGPA(8.5);  // Updating CGPA
       pgStudent.DisplayDetails();  // Display updated details
   }
}
	



Problem 2: Book Library System
* Design a Book class with:
   * ISBN (public)
   * title (protected)
   * author (private)
* Implement methods to:
   * Set and get the author name.
   * Create a subclass EBook to access ISBN and title and demonstrate access modifiers.
using System;


class Book
{
    public string ISBN;      // Public: Accessible everywhere
    protected string title;  // Protected: Accessible in derived classes
    private string author;   // Private: Accessible only within the Book class


    // Constructor to initialize book details
    public Book(string ISBN, string title, string author)
    {
        this.ISBN = ISBN;
        this.title = title;
        this.author = author;
    }


    // Method to set the author name
    public void SetAuthor(string newAuthor)
    {
        author = newAuthor;
    }


    // Method to get the author name
    public string GetAuthor()
    {
        return author;
    }
}


class EBook : Book
{
    public EBook(string ISBN, string title, string author) : base(ISBN, title, author) {}


    // Method to display EBook details
    public void DisplayEBookDetails()
    {
        Console.WriteLine($"ISBN: {ISBN}");   // Public (Accessible)
        Console.WriteLine($"Title: {title}"); // Protected (Accessible in derived class)
    }
}


class Program
{
    public static void Main()
    {
        EBook ebook = new EBook("978-3-16-148410-0", "C# Programming", "John Doe");


        // Displaying eBook details
        ebook.DisplayEBookDetails();


        // Accessing private member via public method
        Console.WriteLine($"Author: {ebook.GetAuthor()}");


        // Updating the author
        ebook.SetAuthor("Jane Doe");
        Console.WriteLine($"Updated Author: {ebook.GetAuthor()}");
    }
}




	



Problem 3: Bank Account Management
* Create a BankAccount class with:
   * accountNumber (public)
   * accountHolder (protected)
   * balance (private)
* Implement methods to:
   * Access and modify balance using public methods.
   * Create a subclass SavingsAccount to demonstrate access to accountNumber and accountHolder.
using System;

class BankAccount
{
   public int accountNumber;    // Public: Accessible anywhere
   protected string accountHolder; // Protected: Accessible in derived classes
   private double balance;      // Private: Accessible only within BankAccount

   // Constructor to initialize account details
   public BankAccount(int accountNumber, string accountHolder, double balance)
   {
       this.accountNumber = accountNumber;
       this.accountHolder = accountHolder;
       this.balance = balance;
   }

   // Method to modify balance
   public void SetBalance(double amount)
   {
       balance = amount;
   }

   // Method to access balance
   public double GetBalance()
   {
       return balance;
   }
}

// Subclass demonstrating access to accountNumber and accountHolder
class SavingsAccount : BankAccount
{
   public SavingsAccount(int accountNumber, string accountHolder, double balance)
       : base(accountNumber, accountHolder, balance) {}

   // Method to display account details
   public void DisplayAccountDetails()
   {
       Console.WriteLine($"Account Number: {accountNumber}");  // Public (Accessible)
       Console.WriteLine($"Account Holder: {accountHolder}");  // Protected (Accessible in derived class)
   }
}

class Program
{
   public static void Main()
   {
       SavingsAccount savings = new SavingsAccount(123456, "John Doe", 5000.0);

       savings.DisplayAccountDetails();
       Console.WriteLine($"Balance: {savings.GetBalance():F2}");

       savings.SetBalance(6000.0);
       Console.WriteLine($"Updated Balance: {savings.GetBalance():F2}");
   }
}
	



Problem 4: Employee Records
* Develop an Employee class with:
   * employeeID (public)
   * department (protected)
   * salary (private)
* Implement methods to:
   * Modify salary using a public method.
   * Create a subclass Manager to access employeeID and department.


using System;

class Employee
{
   public int employeeID;    // Public: Accessible everywhere
   protected string department; // Protected: Accessible in derived classes
   private double salary;      // Private: Accessible only within Employee class

   // Constructor to initialize employee details
   public Employee(int employeeID, string department, double salary)
   {
       this.employeeID = employeeID;
       this.department = department;
       this.salary = salary;
   }

   // Method to modify salary (public access)
   public void SetSalary(double newSalary)
   {
       if (newSalary > 0)
       {
           salary = newSalary;
       }
       else
       {
           Console.WriteLine("Invalid salary amount.");
       }
   }

   // Method to access salary (public access)
   public double GetSalary()
   {
       return salary;
   }
}

// Subclass Manager demonstrating access to employeeID and department
class Manager : Employee
{
   public Manager(int employeeID, string department, double salary)
       : base(employeeID, department, salary) {}

   // Method to display manager details
   public void DisplayManagerDetails()
   {
       Console.WriteLine($"Employee ID: {employeeID}");   // Public (Accessible)
       Console.WriteLine($"Department: {department}");    // Protected (Accessible in derived class)
   }
}

class Program
{
   public static void Main()
   {
       // Creating a Manager object
       Manager manager = new Manager(101, "HR", 50000.0);

       // Displaying manager details
       manager.DisplayManagerDetails();
       Console.WriteLine($"Salary: {manager.GetSalary():F2}");

       // Modifying salary
       manager.SetSalary(60000.0);
       Console.WriteLine($"Updated Salary: {manager.GetSalary():F2}");
   }
}